<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
  <link rel="stylesheet" href="/assets/public/css/domophone.css">
</head>

<body>
  <div class="contentarea">
    <div class="camera">
      <video id="video">Video stream not available.</video>
    </div>
    <canvas id="canvas"></canvas>
    <div class="output-domophone"></div>
  </div>

  <script>
    (function () {
      // The width and height of the captured photo. We will set the
      // width to the value defined here, but the height will be
      // calculated based on the aspect ratio of the input stream.

      var width = 320;    // We will scale the photo width to this
      var height = 0;     // This will be computed based on the input stream

      // |streaming| indicates whether or not we're currently streaming
      // video from the camera. Obviously, we start at false.

      var streaming = false;

      // The various HTML elements we need to configure or control. These
      // will be set by the startup() function.

      var video = null;
      var canvas = null;
      var photo = null;
      var startbutton = null;
      var output = null;

      function startup() {
        output = document.querySelector('.output-domophone');
				console.log("TCL: startup -> output", output)
        video = document.getElementById('video');
        canvas = document.getElementById('canvas');
        photo = document.getElementById('photo');
        startbutton = document.getElementById('startbutton');

        navigator.mediaDevices.getUserMedia({ video: true, audio: false })
          .then(function (stream) {
            video.srcObject = stream;
            video.play();
          })
          .catch(function (err) {
            console.log("An error occurred: " + err);
          });

        video.addEventListener('canplay', function (ev) {
          if (!streaming) {
            height = video.videoHeight / (video.videoWidth / width);

            // Firefox currently has a bug where the height can't be read from
            // the video, so we will make assumptions if this happens.

            if (isNaN(height)) {
              height = width / (4 / 3);
            }

            video.setAttribute('width', width);
            video.setAttribute('height', height);
            canvas.setAttribute('width', width);
            canvas.setAttribute('height', height);
            streaming = true;
          }
        }, false);

        document.addEventListener('keyup', function ({ code }) {
          if (code === 'KeyZ') {
            takepicture();
          }
        });

        clearphoto();
      }

      // Fill the photo with an indication that none has been
      // captured.

      function clearphoto() {
        var context = canvas.getContext('2d');
        context.fillStyle = "#AAA";
        context.fillRect(0, 0, canvas.width, canvas.height);

        var data = canvas.toDataURL('image/jpeg', 1.0);
      }

      // Capture a photo by fetching the current contents of the video
      // and drawing it into a canvas, then converting that to a PNG
      // format data URL. By drawing it on an offscreen canvas and then
      // drawing that to the screen, we can change its size and/or apply
      // other changes before drawing it.

      async function takepicture() {
        var context = canvas.getContext('2d');
        if (width && height) {
          canvas.width = width;
          canvas.height = height;
          context.drawImage(video, 0, 0, width, height);

          var data = canvas.toDataURL('image/jpeg', 1.0);

          const rawResponse = await fetch('/api/domophone', {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 'data': data })
          });
          const answer = await rawResponse.text();
          console.log(answer);
          console.log(output);
          if(answer) {
            output.classList.add('output-domophone-active');
            setTimeout(() => {
              output.classList.remove('output-domophone-active');
            }, 3000);
          } else {
            alert('Попробуйте еще раз');
          }
        } else {
          clearphoto();
        }
      }

      // Set up our event listener to run the startup process
      // once loading is complete.
      window.addEventListener('load', startup, false);
    })();
  </script>

  {{!-- <script>
    var form = document.forms.namedItem("fileinfo");
    form.addEventListener('submit', function (ev) {
      console.log('Отправлено')

      var oOutput = document.querySelector("div"),
        oData = new FormData(form);

      oData.append("CustomField", "This is some extra data");

      var oReq = new XMLHttpRequest();
      oReq.open("POST", "/api/upload", true);
      oReq.onload = function (oEvent) {
        if (oReq.status == 200) {
          oOutput.innerHTML = "Uploaded!";
        } else {
          oOutput.innerHTML = "Error " + oReq.status + " occurred when trying to upload your file.<br \/>";
        }
      };

      console.log(oData);
      oReq.send(oData);
      ev.preventDefault();
    }, false);
  </script> --}}
</body>

</html>